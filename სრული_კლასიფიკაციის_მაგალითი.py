# -*- coding: utf-8 -*-
"""სრული კლასიფიკაციის მაგალითი.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10JATbDzAFxt2vWqZWzevVUfPElP87CEB
"""

import pandas as pd
from sklearn.naive_bayes import GaussianNB
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,roc_curve,roc_auc_score
weather =pd.read_csv("Weather_Prediction.csv")

weather['RainToday']=weather['RainToday'].map({"No":0,"Yes":1})
weather['RainTomorrow']=weather['RainTomorrow'].map({"No":0,"Yes":1})
weather.dropna(axis=0,inplace=True)
y =weather['RainTomorrow'].values
X =weather.drop('RainTomorrow',axis=1).values
X_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.2,random_state=1)
model =GaussianNB()
model.fit(X_train,y_train)
print(model.score(X_test,y_test))

#ავაგოთ Confusion matrix
y_predicted =model.predict(X_test)
cnfm =confusion_matrix(y_test,y_predicted)
diagram =ConfusionMatrixDisplay(confusion_matrix=cnfm,display_labels=model.classes_)
diagram.plot()



#

weather.head()

scores =model.predict_proba(X_test)[:,1]
fpr,tpr,thresholds =roc_curve(y_test,scores)
area =roc_auc_score(y_test,scores)
plt.plot([0,1],[0,1],'r')
plt.plot(fpr,tpr,label =f"area  = {area}")
plt.legend()

weather['RainToday'].unique()

weather.isnull().sum()/weather.shape[0]

weather.info()