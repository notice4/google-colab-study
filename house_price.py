# -*- coding: utf-8 -*-
"""House Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MUvcRNM_EOL_ortRnBhJOY7jVeonPnoP
"""

import pandas as pd
import seaborn as sns
from geopy.distance import geodesic
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import PCA
from sklearn.preprocessing import PowerTransformer
from sklearn.model_selection import train_test_split

house = pd.read_csv("housing.csv")

latt_center = house['latitude'].mean()
long_center = house['longitude'].mean()
center = (latt_center, long_center)

house['distance'] = house.apply(lambda x: geodesic((x['latitude'], x['longitude']), center).km, axis=1)
house['Non_Bedrooms'] = house['total_rooms'] - house['total_bedrooms']
house.drop(['longitude', 'latitude', 'total_rooms', 'ocean_proximity'], axis=1, inplace=True)

for column in house.columns:
    if column != 'median_house_value':
        pt = PowerTransformer()
        house[column] = pt.fit_transform(house[[column]])
print(house.head())
house.dropna(axis=0, inplace=True)

y = house['median_house_value'].values
X = house.drop('median_house_value', axis=1).values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
pca = PCA(n_components=7)

X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

model = LinearRegression()
model.fit(X_train, y_train)

print(model.score(X_test, y_test))

# !pip install geopy

# sns.pairplot(house)

house.corr()

print(house.shape)
